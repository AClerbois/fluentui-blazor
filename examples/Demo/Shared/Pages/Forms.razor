@page "/Forms"

<h1>Fluent UI Blazor forms overview</h1>
<p>
    A lot of the components in this library are specifically made to get input by means of forms. These components almost all derive from 
    <code>FluentInputBase&lt;TValue&gt;</code>, our generic abstract base class for Fluent UI Blazor input handling components. Let's first dive a bit deeper
    into this component.
</p>

<h2>Input components and forms</h2>

<h3>FluentInputBase&lt;TValue&gt;</h3>
<p>
    <code>FluentInputBase&lt;TValue&gt;</code> is a generic class which makes it possible for this base class to handle different types of data.
    It is also an abstract class so you can <b>not</b> create or use a <code>FluentInputBase&lt;TValue&gt;</code> on a page or in another component. 
    Because it is a base class, it exposes the following parameters through every derived component.<br /><br />
    <em>These parameters are also shown in the component overviews in the rest of the documentation pages</em>
</p>

<h4>Parameters</h4>
<FluentDataGrid Items="@Properties.AsQueryable()" GridTemplateColumns="1fr 1fr 0.5fr 1.5fr">
    <TemplateColumn Title="Name">
        <code>@context.Name</code>
    </TemplateColumn>
    <PropertyColumn Property="@(c => c.Type)" />
    <PropertyColumn Property="@(c => c.Default)" />
    <TemplateColumn Title="Description">
        <div style="white-space: break-spaces">
            @(new MarkupString(context.Description))
        </div>
    </TemplateColumn>
</FluentDataGrid>

<h4>EventCallbacks</h4>
<FluentDataGrid Items="@Callbacks.AsQueryable()" GridTemplateColumns="1fr 1fr 1fr">
    <TemplateColumn Title="Name">
        <code>@context.Name</code>
    </TemplateColumn>
    <PropertyColumn Property="@(c => c.Type)" />
    <TemplateColumn Title="Description">
        <div style="white-space: break-spaces">
            @(new MarkupString(context.Description))
        </div>
    </TemplateColumn>
</FluentDataGrid>

<h4>Methods</h4>
<FluentDataGrid Items="@Methods.AsQueryable()" GridTemplateColumns="1fr 1fr 1fr">
    <TemplateColumn Title="Name">
        <code>@context.Name</code>
    </TemplateColumn>
    <TemplateColumn Title="Parameters">
        @foreach (var param in @context.Parameters.Split(','))
        {
            @param <br />
        }
    </TemplateColumn>
    <TemplateColumn Title="Description">
        <div style="white-space: break-spaces">
            @(new MarkupString(context.Description))
        </div>
    </TemplateColumn>
</FluentDataGrid>

<h3>Derived components</h3>
<p>
    The list below sums up the current derived components and the way they use the <code>FluentInputBase</code> base class.
    <ul>
        <li><code>FluentCheckbox</code> : <code>FluentInputBase&lt;bool&gt;</code></li>
        <li><code>FluentNumberField&lt;TValue&gt;</code> : <code>FluentInputBase&lt;TValue&gt;</code></li>
        <li><code>FluentRadioGroup</code> : <code>FluentInputBase&lt;string?&gt;</code></li>
        <li><code>FluentSearch</code> : <code>FluentInputBase&lt;string?&gt;</code></li>
        <li><code>FluentSlider</code> : <code>FluentInputBase&lt;int&gt;</code></li>
        <li><code>FluentSwitch</code> : <code>FluentInputBase&lt;bool&gt</code>;</li>
        <li><code>FluentTextArea</code> : <code>FluentInputBase&lt;string?&gt</code>;</li>
        <li><code>FluentTextField</code> : <code>FluentInputBase&lt;string?&gt;</code></li>
        <li><code>FluentTimePicker</code> : <code>FluentInputBase&lt;DateTime?&gt;</code></li>
    </ul>
</p>

<h2>Validation</h2>
<p>

</p>
<ul> 
    <li>FluentValidationSummary</li>
    <li>FluentValidationMessage</li>
</ul>

<h2>Layout</h2>
<p>
    In principal a label is shown right above the actual input field. 
    You can use 3 ways to layout your forms:
    <ul>
        <li>Use the <a href="/Stack">FluentStack</a> component</li>
        <li>Use the <a href="/Grid">FluentGrid and FluentGridItem</a> components</li>
        <li>Use your own HTML elements and CSS classes</li>
    </ul>
</p>

@code {
    private record paramDef(string Name, string Type, string? Default, string Description);
    private record eventDef(string Name, string Type, string Description);
    private record methodDef(string Name, string Parameters, string Description);

    private List<paramDef> Properties = new List<paramDef>
    {
        new paramDef("AriaLabel","string?","null","Gets or sets the text used on aria-label attribute."),
        new paramDef("AutoFocus","bool","false","Determines if the element should receive document focus on page load."),
        new paramDef("ReadOnly","bool","false","When true, the control will be immutable by user interaction. <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly\">readonly</a> HTML attribute for more information."),
        new paramDef("Id","string?","","Gets or sets the id attribute of the element. Used for label association."),
        new paramDef("Disabled","bool","false","Disables the form control, ensuring it doesn't participate in form submission."),
        new paramDef("Name","string?","null","Gets or sets the name of the element. Allows access by name from the associated form. ⚠️ This value needs to be set manually for SSR scenarios to work correctly."),
        new paramDef("Required","bool","false","Gets or sets whether the element needs to have a value"),
        new paramDef("Value","TValue?","null","Gets or sets the value of the input. This should be used with two-way binding."),
        new paramDef("DisplayName","string?","null","Gets or sets the display name for this field."),
        new paramDef("ValueExpression","Expression<Func<TValue>>?","null","Gets or sets an expression that identifies the bound value."),
        new paramDef("Placeholder","string?","null","Gets or sets the short hint displayed in the input before the user enters a value."),
        new paramDef("Label","string?","null","Gets or sets the text displayed just above or in front of the component."),
        new paramDef("LabelTemplate","RenderFragment?","null","Gets or sets the text displayed just above or in front of the component."),

    };

    private List<eventDef> Callbacks = new List<eventDef>
    {
        new eventDef("ValueChanged","EventCallback<TValue>","Gets or sets a callback that updates the bound value")
    };

    private List<methodDef> Methods = new List<methodDef>
    {
        new methodDef("FocusAsync","","Exposes the FocusAsync() method."),
        new methodDef("FocusAsync","bool preventScroll","Exposes the elements FocusAsync(bool preventScroll) method.")
    };

    /// <summary>
    ///
    /// </summary>
    [Parameter]
    public virtual bool Autofocus { get; set; } = false;
}