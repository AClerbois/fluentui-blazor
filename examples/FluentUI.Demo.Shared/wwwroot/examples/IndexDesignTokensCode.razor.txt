@inject BaseLayerLuminance BaseLayerLuminance
@inject AccentBaseColor AccentBaseColor
@inject BodyFont BodyFont
@inject StrokeWidth StrokeWidth
@inject ControlCornerRadius ControlCornerRadius

<FluentButton @ref="ref1" Appearance="Appearance.Neutral" Href="handlers">Web components handlers</FluentButton>
<FluentButton @ref="ref2" Appearance="Appearance.Accent" Href="bindings">Web components bindings</FluentButton>
<FluentButton @ref="ref3" Appearance="Appearance.Neutral" Href="componentbindings">Blazor component bindings</FluentButton>
<FluentButton @ref="ref4" Appearance="Appearance.Neutral" @onclick=OnClick>Click me to remove the border!</FluentButton>


@code {
    private FluentButton? ref1;
    private FluentButton? ref2;
    private FluentButton? ref3;
    private FluentButton? ref4;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            //Set to dark mode
            await BaseLayerLuminance.SetValueFor(ref1!.Element, (float)0.15);

            await AccentBaseColor.SetValueFor(ref2!.Element, "#107C41".ToSwatch());

            await BodyFont.SetValueFor(ref3!.Element, "Comic Sans MS");

            //Set 'border' width for ref4
            await StrokeWidth.SetValueFor(ref4!.Element, 7);
            //And change conrner radius as well
            await ControlCornerRadius.SetValueFor(ref4!.Element, 15);

            StateHasChanged();
        }

    }

    public async Task OnClick()
    {
        //Remove the accent color
        await StrokeWidth.DeleteValueFor(ref4!.Element);
    }
}