@inject DataSource Data

<p>
    Selected value: @SelectedValue <br />
    Selected items: @(String.Join(" - ", SelectedOptions!.Select(i => i.LastName)))
</p>

<div style="display: block; height: 300px;">
<label for="people-listbox2">Select persons</label>
<FluentSelect TOption="Person"
              Items="@Data.People"
              Id="people-listbox2"
              Multiple="true"
              OptionValue="@(p => p.PersonId.ToString())"
              OptionText="@(p => p.LastName + ", " + p.FirstName)"
              @bind-Value="@SelectedValue"
              @bind-SelectedOptions="@SelectedOptions" />

</div>

<div style="display: flex; flex-direction: row"> 
<FluentListbox TOption="MonthItem"
               MultipleSelectedText="@(i => @SelectedText)"
               Multiple="true">
    @foreach (var item in Items)
    {
        <FluentOption @bind-Selected="@item.Selected">
            @item.Name
            <FluentIcon Name="@item.Icon" Slot="start" Filled=false Color="IconColor.Neutral" Size="IconSize.Size20" />
        </FluentOption>
    }
</FluentListbox>

<FluentSelect TOption="MonthItem"
              MultipleSelectedText="@(i => @SelectedText)"
              Multiple="true">
    @foreach (var item in Items)
    {
        <FluentOption @bind-Selected="@item.Selected">
            @item.Name
            <FluentIcon Name="@item.Icon" Slot="start" Filled=false Color="IconColor.Neutral" Size="IconSize.Size20" />
        </FluentOption>
    }
</FluentSelect>

</div>
<p>
    Selected: @SelectedText
</p>



@code
{
    IEnumerable<Person>? SelectedOptions;
    string? SelectedValue;

    protected override void OnInitialized()
    {
        SelectedOptions = Data.People.Skip(2).Take(2);
    }

    public List<Item> Items = new()
      {
          new Item {Name = "January", Icon = FluentIcons.WeatherSnowflake, Selected = true },
          new Item {Name = "April", Icon = FluentIcons.WeatherHaze, Selected = false },
          new Item {Name = "August", Icon = FluentIcons.WeatherSunny, Selected = true },
      };

    public string SelectedText => String.Join(" - ", Items.Where(i => i.Selected).Select(i => i.Name));

    public class Item
    {
        public string Name { get; set; } = "";
        public string Icon { get; set; } = "";
        public bool Selected { get; set; } = false;
    }

    public class MonthItem
    {
        public string Index { get; set; } = "00";
        public string Name { get; set; } = "";
        public override string ToString() => $"{Index:00} {Name}";
    }

}