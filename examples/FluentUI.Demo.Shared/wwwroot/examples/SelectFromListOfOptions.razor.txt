<h5>From list of Option&lt;string&gt; items</h5>
<p>Second item in the list is initially selected. We add an <code>OptionSelected</code> parameter to reflect this in the component.</p>
<FluentSelect Items=@stringOptions
               OptionText="@(i => i.Text)"
               OptionValue="@(i => i.Value)"
               OptionSelected="@(i => i.Selected)"
               @bind-Value="@stringValue" />
<p>
    Selected Value: @stringValue<br />
</p>

<h5>From list of Option&lt;int&gt; items</h5>
<p>First item in the list is disabled. We add an <code>OptionDisabled</code> parameter to reflect this in the component.</p>

<FluentSelect Items=@intOptions
               TOption="Option<int>"
               OptionText="@(i => i.Text.ToString())"
               OptionValue="@(i => i.Value.ToString())"
               OptionDisabled="@(i => i.Disabled)"
               @bind-SelectedOption="@selectedIntOption"
               @bind-Value="@intValue" />
<p>
    Selected Value: @intValue<br />
    Selected Item (strongly typed): <br />
    Value: @selectedIntOption?.Value (Type: @(selectedIntOption?.Value.GetType())) <br />
    Text: @selectedIntOption?.Text
</p>

<h5>From list of Option&lt;string&gt; items where multiple can be selected</h5>
<p>Items 2, 5 and 8 are initially selected with the <code>OptionSelected</code> function.</p>
<p>Items with a value higher than 6 2, 5 and 8 are disabled with the <code>OptionDisabled</code> function.</p>
<p>Item 8 is both selected and disabled and can therefore not be changed.</p>
<div style="display: block; height: 300px;">
    <FluentSelect Items=@stringOptions
                  TOption="Option<string>"
                  Multiple=true
                  OptionText="@(i => i.Text)"
                  OptionValue="@(i => i.Value)"
                  OptionSelected="@(i => i.Selected)"
                  OptionDisabled="@(i => int.Parse(i.Value!) > 6)"
                  @bind-SelectedOptions="@selectedStrings" />
</div>
<p>
    Selected strings: @(selectedStrings != null ? string.Join(',', selectedStrings.Select(o => o.Value)) : "")<br />
</p>

@code {
    string? stringValue;
    string? intValue;
    Option<int>? selectedIntOption;
    IEnumerable<Option<string>>? selectedStrings;

    List<Option<string>> stringOptions = new()
    {
        { new Option<string> { Value = "1", Text = "One" } },
        { new Option<string> { Value = "2", Text = "Two", Selected = true } },
        { new Option<string> { Value = "3", Text = "Three" } },
        { new Option<string> { Value = "4", Text = "Four" } },
        { new Option<string> { Value = "5", Text = "Five", Selected = true } },
        { new Option<string> { Value = "6", Text = "Six" } },
        { new Option<string> { Value = "7", Text = "Seven" } },
        { new Option<string> { Value = "8", Text = "Eight", Selected = true } },
        { new Option<string> { Value = "9", Text = "Nine" } }

    };

    List<Option<int>> intOptions = new()
    {
        { new Option<int> { Value = 1, Text = 1, Disabled = true } },
        { new Option<int> { Value = 2, Text = 2 } },
        { new Option<int> { Value = 3, Text = 3 } }

    };
}