<FluentTextField @oninput="FilterChanged">Filter Fruit</FluentTextField>
<FluentDataGrid id="sortingGrid" GridTemplateColumns="1fr 1fr 1fr" RowsData=SortedRowsGrid ColumnDefinitions=SortingColumnsGrid>
    <HeaderCellTemplate>
        <FluentButton @onclick=@(()=>SortColumn(context))>
            @context.Title
            @if (context.Title == lastSortColumn?.Title)
            {
                @(isAscending ? " ↑" : " ↓")
            }
        </FluentButton>
    </HeaderCellTemplate>
</FluentDataGrid>

@code {
    public record SampleGridData(string Fruit, string Cost, string Color);
    public List<ColumnDefinition<SampleGridData>> SortingColumnsGrid = new();
    private ColumnDefinition<SampleGridData>? lastSortColumn = null;
    private bool isAscending = false;
    public string filterValue = "";

    
    List<SampleGridData> RawSortedRowsGrid = new List<SampleGridData>()
    {
        new SampleGridData("apples", "$1.50", "red" ),
        new SampleGridData("bananas", "$0.99", "yellow" ),
        new SampleGridData("grapes", "$1.99", "purple" ),
        new SampleGridData("oranges", "$1.25", "orange" )

    };
    List<SampleGridData> SortedRowsGrid = new();

    protected override void OnInitialized()
    {
        SortingColumnsGrid.Add(new ColumnDefinition<SampleGridData>("Fruit", x => x.Fruit));
        SortingColumnsGrid.Add(new ColumnDefinition<SampleGridData>("Cost", x => x.Cost));
        SortingColumnsGrid.Add(new ColumnDefinition<SampleGridData>("Color", x => x.Color));

        SortedRowsGrid = RawSortedRowsGrid;

        base.OnInitialized();
    }
    
    private void FilterChanged(ChangeEventArgs args)
    {
        var filter = args.Value as string;

        if (string.IsNullOrWhiteSpace(filter))
        {
            SortedRowsGrid = RawSortedRowsGrid;
        }
        else
        {
            SortedRowsGrid = RawSortedRowsGrid.Where(x => x.Fruit.Contains(filter)).ToList();
        }
        if (lastSortColumn != null)
        {
            SortedRowsGrid.Sort(new CustomComparer(lastSortColumn.FieldSelector!, isAscending));
        }
    }

    private void SortColumn(ColumnDefinition<SampleGridData> columnDefinition)
    {
        if (lastSortColumn?.Title == columnDefinition.Title)
        {
            isAscending = !isAscending;
        }
        else
        {
            lastSortColumn = columnDefinition;
            isAscending = true;
        }
        SortedRowsGrid.Sort(new CustomComparer(columnDefinition.FieldSelector!, isAscending));
    }
    
    class CustomComparer : IComparer<SampleGridData>
    {
        Func<SampleGridData, object> _selector;
        bool _isAscending;

        public CustomComparer(Func<SampleGridData, object> selector, bool isAscending)
        {
            _selector = selector;
            _isAscending = isAscending;
        }

        int IComparer<SampleGridData>.Compare(SampleGridData? x, SampleGridData? y)
        {
            var xs = _selector(x!) as string;
            var ys = _selector(y!) as string;
            if (xs == null || ys == null)
                return 0;
            return string.Compare(xs, ys) * (_isAscending ? 1 : -1);
        }
    }
}

