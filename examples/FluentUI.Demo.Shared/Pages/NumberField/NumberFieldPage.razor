@page "/NumberFieldPage"
<h1>Number field</h1>
<ApiDocumentation Component="typeof(FluentNumberField<int>)" />
<h4>Default</h4>
<p>
    <FluentNumberField @bind-Value="exampleInt">Integer</FluentNumberField>
    <br />
    Example int: @exampleInt
    <br />
    Minimum value: @(int.MinValue); Maximum value: @(int.MaxValue)
</p>
<p>
    Same as above but bound to oninput event by using component that inherits from the <code>FluentNumberField</code> component<br />
    See the \Shared folder for the implementation<br />
    <FluentNumberFieldOnInput @bind-Value="exampleInt2" Appearance="Appearance.Filled">Integer</FluentNumberFieldOnInput>
    <br />
    Example int: @exampleInt2
</p>
<p>
    <FluentNumberField @bind-Value="exampleLong">Long</FluentNumberField><br />
    Example long: @exampleLong
    <br />
    Minimum value: -999999999999; Maximum value: 999999999999
</p>
<p>
    <FluentNumberField Value="short.MinValue">Short</FluentNumberField>
    <br />
    Minimum value: @(short.MinValue); Maximum value: @(short.MaxValue)
</p>

<p>
    <FluentNumberField @bind-Value="@exampleFloat">Float</FluentNumberField><br />
    Example float: @exampleFloat
    <br />
    Minimum value: @(float.MinValue); Maximum value: @(float.MaxValue)
</p>
<p>
    <FluentNumberField Step=0.25 @bind-Value="@exampleFloat">Float</FluentNumberField><br />
    Example float: @exampleFloat (step=0.25)
    <br />
    Minimum value: @(float.MinValue); Maximum value: @(float.MaxValue)
</p>
<p>
    <FluentNumberField @bind-Value="@exampleDouble" >Double</FluentNumberField><br />
    Example double: @exampleDouble
    <br />
    Minimum value: @(double.MinValue); Maximum value: @(double.MaxValue)
</p>
<p>
    <FluentNumberField @bind-Value="@exampleDecimal">Decimal</FluentNumberField><br />
    Example decimal: @exampleDecimal
    <br />
    Minimum value: @(decimal.MinValue); Maximum value: @(decimal.MaxValue)
</p>

<h4>Full Width</h4>
<FluentNumberField TValue="int?" style="width: 100%;"></FluentNumberField>

<h4>Placeholder</h4>
<FluentNumberField TValue="int?" Placeholder="Placeholder"></FluentNumberField>

<!-- Required -->
<h4>Required</h4>
<FluentNumberField TValue="int?" Required="true"></FluentNumberField>

<!-- Disabled -->
<h4>Disabled</h4>
<FluentNumberField TValue="int?" Disabled="true"></FluentNumberField>
<FluentNumberField TValue="int?" Disabled="true">label</FluentNumberField>
<FluentNumberField TValue="int?" Disabled="true" Placeholder="placeholder"></FluentNumberField>

<!-- Read only -->
<h4>Read only</h4>
<FluentNumberField TValue="int?" Readonly="true" Value="1"></FluentNumberField>
<FluentNumberField TValue="int?" Readonly="true" Value="2">label</FluentNumberField>

<!-- Read only -->
<h4>Autofocus</h4>
<FluentNumberField TValue="int?" Autofocus="true">autofocus</FluentNumberField>

<!-- Start -->
<h4>With start</h4>
<FluentNumberField TValue="int?">
    <FluentIcon Name="@FluentIcons.Globe" Slot="start" Size="@IconSize.Size16" Filled=false UseAccentColor=false />  
</FluentNumberField>

<!-- End -->
<h4>With end</h4>
<FluentNumberField TValue="int?">
    <FluentIcon Name="@FluentIcons.Globe" Slot="end" Size="@IconSize.Size16" Filled=false UseAccentColor=false />  
</FluentNumberField>

<h4>Filled</h4>
<h5>Default</h5>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled"></FluentNumberField>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled">label</FluentNumberField>

<h5>Placeholder</h5>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled" Placeholder="Placeholder"></FluentNumberField>

<!-- Required -->
<h5>Required</h5>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled" Required="true"></FluentNumberField>

<!-- Disabled -->
<h5>Disabled</h5>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled" Disabled="true"></FluentNumberField>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled" Disabled="true">label</FluentNumberField>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled" Disabled="true" Placeholder="placeholder"></FluentNumberField>

<!-- Read only -->
<h5>Read only</h5>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled" Readonly="true" Value="3"></FluentNumberField>
<FluentNumberField TValue="int?" Appearance="Appearance.Filled" Readonly="true" Value="4">label</FluentNumberField>

<!-- With label -->
<h4>Visual vs audio label</h4>
<FluentNumberField TValue="int?">
    <span aria-label="Audio label">Visible label</span>
</FluentNumberField>

<!-- With hidden label -->
<h4>Audio label only</h4>
<FluentNumberField TValue="int?">
    <span aria-label="Audio label only"></span>
</FluentNumberField>

<!-- With aria-label -->
<h4>With aria-label</h4>
<FluentNumberField TValue="int?" aria-label="Text field with aria-label"></FluentNumberField>

<!-- Focus Async -->
<h4>Focus Async</h4>
<FluentButton @onclick="() => focusTest!.FocusAsync()">FocusAsync</FluentButton> 
<FluentTextField @ref=focusTest></FluentTextField>

<!-- Hide Up-Down -->
<h4>Hide up/down steps</h4>
<FluentNumberField TValue="int?" HideStep=true></FluentNumberField>
@code{
    FluentTextField? focusTest;
    int exampleInt { get; set; } = 123;
    int exampleInt2 { get; set; } = 345;
    long exampleLong { get; set; } = 999999999999;
    float exampleFloat { get; set; } = 123.45f;
    double exampleDouble { get; set; } = 456.32d;
    decimal exampleDecimal { get; set; } = Decimal.One / 3;
}
