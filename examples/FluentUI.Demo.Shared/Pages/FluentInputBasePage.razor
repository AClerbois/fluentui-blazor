@page "/FluentInputBase"

<h1>FluentInputBase&lt;TValue&gt;</h1>

<p>
    <code>FluentInputBase&lt;TValue&gt;</code> is the abstract base class all Fluent UI input handling components inherit from.
</p>
<p>
    You can <b>not</b> create or use a <code>FluentInputBase&lt;TValue&gt;</code>; on a page or in another component but it adds
    the following parameters to every derived component.<br /><br />
    <em>These parameters are also shown in the component overviews in the rest of the documentation pages</em>
</p>

<h2>FluentInputBase&lt;TValue&gt; Class</h2>

<h3>Parameters</h3>
<FluentDataGrid RowsData="@Properties.ToList()" ColumnDefinitions=@_propertiesGrid GridTemplateColumns="1fr 1fr 0.5fr 1.5fr">
    <RowItemTemplate>
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1">
                <FluentBadge Appearance="Appearance.Neutral">@context.Name</FluentBadge>
            </FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">
                @context.Type
            </FluentDataGridCell>
            <FluentDataGridCell GridColumn="3">
                @context.Default
            </FluentDataGridCell>
            <FluentDataGridCell GridColumn="4">
                <div style="white-space: break-spaces">
                    @(new MarkupString(context.Description))
                </div>
            </FluentDataGridCell>
        </FluentDataGridRow>
    </RowItemTemplate>
</FluentDataGrid>

<h3>EventCallbacks</h3>
<FluentDataGrid RowsData="@Callbacks.ToList()" ColumnDefinitions="@_eventsGrid" GridTemplateColumns="1fr 1fr 1fr">
    <RowItemTemplate>
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1">
                <code>@context.Name</code>
            </FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">
                @context.Type
            </FluentDataGridCell>
            <FluentDataGridCell GridColumn="3">
                <div style="white-space: break-spaces">
                    @context.Description
                </div>
            </FluentDataGridCell>
        </FluentDataGridRow>
    </RowItemTemplate>
</FluentDataGrid>

<h3>Methods</h3>
<FluentDataGrid RowsData="@Methods.ToList()" ColumnDefinitions="@_methodsGrid" GridTemplateColumns="1fr 1fr 1fr">
    <RowItemTemplate>
        <FluentDataGridRow>
            <FluentDataGridCell GridColumn="1">
                <code>@context.Name</code>
            </FluentDataGridCell>
            <FluentDataGridCell GridColumn="2">
                @foreach (var param in @context.Parameters.Split(','))
                {
                    @param <br />
                }
            </FluentDataGridCell>
            <FluentDataGridCell GridColumn="3">
                <div style="white-space: break-spaces">
                    @context.Description
                </div>
            </FluentDataGridCell>
        </FluentDataGridRow>
    </RowItemTemplate>
</FluentDataGrid>

@code {
    private record paramDef(string Name, string Type, string? Default, string Description);
    private record eventDef(string Name, string Type, string Description);
    private record methodDef(string Name, string Parameters, string Description);

    private List<ColumnDefinition<paramDef>> _propertiesGrid = new();
    private List<ColumnDefinition<eventDef>> _eventsGrid = new();
    private List<ColumnDefinition<methodDef>> _methodsGrid = new();

    private List<paramDef> Properties = new List<paramDef>
    {
        new paramDef("Readonly","bool","false","When true, the control will be immutable by user interaction. <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly\">readonly</a> HTML attribute for more information."),
        new paramDef("Id","string?","","The id attribute of the element.Used for label association."),
        new paramDef("Disabled","bool","false","Disables the form control, ensuring it doesn't participate in form submission."),
        new paramDef("Name","string?","null","The name of the element.Allows access by name from the associated form."),
        new paramDef("Required","bool","false","Whether the element needs to have a value"),
        new paramDef("Value","TValue?","null","Gets or sets the value of the input. This should be used with two-way binding."),
        new paramDef("DisplayName","string?","null","Gets or sets the display name for this field."),
        new paramDef("ValueExpression","Expression<Func<TValue>>?","null","Gets or sets an expression that identifies the bound value.")
    };

    private List<eventDef> Callbacks = new List<eventDef>
    {
        new eventDef("ValueChanged","EventCallback<TValue>"," Gets or sets a callback that updates the bound value")
    };

    private List<methodDef> Methods = new List<methodDef>
    {
        new methodDef("FocusAsync","","Exposes the FocusAsync() method."),
        new methodDef("FocusAsync","bool preventScroll","Exposes the elements FocusAsync(bool preventScroll) method.")
    };

    protected override void OnInitialized()
    {
        base.OnInitialized();

        _propertiesGrid.Add(new ColumnDefinition<paramDef>("Name", x => x.Name));
        _propertiesGrid.Add(new ColumnDefinition<paramDef>("Type", x => x.Type));
        _propertiesGrid.Add(new ColumnDefinition<paramDef>("Default", x => x.Default ?? ""));
        _propertiesGrid.Add(new ColumnDefinition<paramDef>("Description", x => x.Description));

        _eventsGrid.Add(new ColumnDefinition<eventDef>("Name", x => x.Name));
        _eventsGrid.Add(new ColumnDefinition<eventDef>("Type", x => x.Type));
        _eventsGrid.Add(new ColumnDefinition<eventDef>("Description", x => x.Description));

        _methodsGrid.Add(new ColumnDefinition<methodDef>("Name", x => x.Name));
        _methodsGrid.Add(new ColumnDefinition<methodDef>("Parameters", x => x.Parameters));
        _methodsGrid.Add(new ColumnDefinition<methodDef>("Description", x => x.Description));

    }

}



