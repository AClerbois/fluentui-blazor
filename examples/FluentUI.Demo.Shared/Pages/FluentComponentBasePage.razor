@page "/FluentComponentBase"


<h1>FluentComponentBase</h1>

<p>
    <code>FluentComponentBase</code> is the abstract base class all other Fluent UI Blazor components inherit from.
</p>
<p>You can <b>not</b> create or use a <code>FluentBaseComponent</code> on a page or in another component but it adds the following parameters to every derived component.<br /><br />
<em>These parameters are not shown in the component overviews in the rest of the documentation pages</em>
</p>

<h2>FluentComponentBase Class</h2>

<h3>Parameters</h3>
<FluentDataGrid RowsData="@Properties.AsQueryable()" GridTemplateColumns="1fr 1fr 0.5fr 1.5fr">
    <TemplateColumn Title="Name">
        <code>@context.Name</code>
    </TemplateColumn>
    <PropertyColumn Property="@(c => c.Type)" />
    <PropertyColumn Property="@(c => c.Default)" />
    <TemplateColumn Title="Description">
        <div style="white-space: break-spaces">
            @(new MarkupString(context.Description))
        </div>
    </TemplateColumn>
</FluentDataGrid>


@code {
    private record paramDef(string Name, string Type, string? Default, string Description);
    
    private List<paramDef> Properties = new List<paramDef>
    {
        new paramDef("AdditionalAttributes"," IReadOnlyDictionary<string, object>?","null","Gets or sets a collection of additional attributes that will be applied to the created element."),
        new paramDef("BackReference","Reference?","null","A reference to the enclosing component."),
        new paramDef("ChildContent","RenderFragment?","null","Gets or sets the content to be rendered inside the component")
    };
}



